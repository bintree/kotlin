== f ==
fun f() {
    class LocalClass() {
        fun f() {
            val x = ""

            fun loc() {
                val x3 = ""
            }
        }
    }
}
---------------------
L0:
  0 <START>
  1 mark({ class LocalClass() { fun f() { val x = "" fun loc() { val x3 = "" } } } })
  1 jmp?(L2)                                                                             NEXT:[<END>, d(fun f() { val x = "" fun loc() { val x3 = "" } })]
  1 d(fun f() { val x = "" fun loc() { val x3 = "" } })                                  NEXT:[<SINK>]
L1:
L2:
  0 <END>                                                                                NEXT:[<SINK>]                                                                               PREV:[jmp?(L2)]
error:
  0 <ERROR>                                                                              PREV:[]
sink:
  0 <SINK>                                                                               PREV:[<ERROR>, <END>, d(fun f() { val x = "" fun loc() { val x3 = "" } })]
L3:
  2 <START>
  3 mark({ val x = "" fun loc() { val x3 = "" } })
  3 v(val x = "")
  3 mark("")
  3 r("")
  3 w(x)
  3 jmp?(L5)                                          NEXT:[<END>, d(fun loc() { val x3 = "" })]
  3 d(fun loc() { val x3 = "" })                      NEXT:[<SINK>]
L4:
L5:
  2 <END>                                             NEXT:[<SINK>]                                            PREV:[jmp?(L5)]
error:
  2 <ERROR>                                           PREV:[]
sink:
  2 <SINK>                                            PREV:[<ERROR>, <END>, d(fun loc() { val x3 = "" })]
L6:
  4 <START>
  5 mark({ val x3 = "" })
  5 v(val x3 = "")
  5 mark("")
  5 r("")
  5 w(x3)
L7:
  4 <END>                    NEXT:[<SINK>]
error:
  4 <ERROR>                  PREV:[]
sink:
  4 <SINK>                   PREV:[<ERROR>, <END>]
=====================
== f ==
fun f() {
            val x = ""

            fun loc() {
                val x3 = ""
            }
        }
---------------------
L3:
  2 <START>
  3 mark({ val x = "" fun loc() { val x3 = "" } })
  3 v(val x = "")
  3 mark("")
  3 r("")
  3 w(x)
  3 jmp?(L5)                                          NEXT:[<END>, d(fun loc() { val x3 = "" })]
  3 d(fun loc() { val x3 = "" })                      NEXT:[<SINK>]
L4:
L5:
  2 <END>                                             NEXT:[<SINK>]                                            PREV:[jmp?(L5)]
error:
  2 <ERROR>                                           PREV:[]
sink:
  2 <SINK>                                            PREV:[<ERROR>, <END>, d(fun loc() { val x3 = "" })]
L6:
  4 <START>
  5 mark({ val x3 = "" })
  5 v(val x3 = "")
  5 mark("")
  5 r("")
  5 w(x3)
L7:
  4 <END>                    NEXT:[<SINK>]
error:
  4 <ERROR>                  PREV:[]
sink:
  4 <SINK>                   PREV:[<ERROR>, <END>]
=====================
== loc ==
fun loc() {
                val x3 = ""
            }
---------------------
L6:
  4 <START>
  5 mark({ val x3 = "" })
  5 v(val x3 = "")
  5 mark("")
  5 r("")
  5 w(x3)
L7:
  4 <END>                    NEXT:[<SINK>]
error:
  4 <ERROR>                  PREV:[]
sink:
  4 <SINK>                   PREV:[<ERROR>, <END>]
=====================
