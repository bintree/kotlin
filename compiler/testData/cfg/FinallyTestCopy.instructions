== doSmth ==
fun doSmth() {}
---------------------
L0:
  0 <START>
  1 mark({})
  1 read (Unit)
L1:
  0 <END>          NEXT:[<SINK>]
error:
  0 <ERROR>        PREV:[]
sink:
  0 <SINK>         PREV:[<ERROR>, <END>]
=====================
== doSmth1 ==
fun doSmth1() {}
---------------------
L0:
  0 <START>
  1 mark({})
  1 read (Unit)
L1:
  0 <END>          NEXT:[<SINK>]
error:
  0 <ERROR>        PREV:[]
sink:
  0 <SINK>         PREV:[<ERROR>, <END>]
=====================
== doSmth2 ==
fun doSmth2() {}
---------------------
L0:
  0 <START>
  1 mark({})
  1 read (Unit)
L1:
  0 <END>          NEXT:[<SINK>]
error:
  0 <ERROR>        PREV:[]
sink:
  0 <SINK>         PREV:[<ERROR>, <END>]
=====================
== cond ==
fun cond() {}
---------------------
L0:
  0 <START>
  1 mark({})
  1 read (Unit)
L1:
  0 <END>          NEXT:[<SINK>]
error:
  0 <ERROR>        PREV:[]
sink:
  0 <SINK>         PREV:[<ERROR>, <END>]
=====================
== testCopy1 ==
fun testCopy1() : Int {
    try {
        doSmth()
    }
    catch (e: NullPointerException) {
        doSmth1()
    }
    catch (e: Exception) {
        doSmth2()
    }
    finally {
        return 1
    }
}
---------------------
L0:
  0 <START>
  1 mark({ try { doSmth() } catch (e: NullPointerException) { doSmth1() } catch (e: Exception) { doSmth2() } finally { return 1 } })
  1 mark(try { doSmth() } catch (e: NullPointerException) { doSmth1() } catch (e: Exception) { doSmth2() } finally { return 1 })
  1 jmp?(L2 [onException])                                                                                                              NEXT:[jmp?(L5 [catch 0]), jmp?(L3 [onExceptionToFinallyBlock])]
  1 jmp?(L3 [onExceptionToFinallyBlock])                                                                                                NEXT:[mark({ return 1 }), mark({ doSmth() })]
  2 mark({ doSmth() })
  2 mark(doSmth())
  2 call(doSmth, doSmth)
  1 jmp(L4 [afterCatches])                                                                                                              NEXT:[jmp(L6 [skipFinallyToErrorBlock])]
L2 [onException]:
  1 jmp?(L5 [catch 0])                                                                                                                  NEXT:[v(e: Exception), v(e: NullPointerException)]                                                                                         PREV:[jmp?(L2 [onException])]
  2 v(e: NullPointerException)
  2 w(e)
  3 mark({ doSmth1() })
  3 mark(doSmth1())
  3 call(doSmth1, doSmth1)
  2 jmp(L4 [afterCatches])                                                                                                              NEXT:[jmp(L6 [skipFinallyToErrorBlock])]
L5 [catch 0]:
  2 v(e: Exception)                                                                                                                     PREV:[jmp?(L5 [catch 0])]
  2 w(e)
  3 mark({ doSmth2() })
  3 mark(doSmth2())
  3 call(doSmth2, doSmth2)
  2 jmp(L4 [afterCatches])
L4 [afterCatches]:
  1 jmp(L6 [skipFinallyToErrorBlock])                                                                                                   NEXT:[mark({ return 1 })]                                                                                                                  PREV:[jmp(L4 [afterCatches]), jmp(L4 [afterCatches]), jmp(L4 [afterCatches])]
L3 [onExceptionToFinallyBlock]:
L7 [start finally]:
  2 mark({ return 1 })                                                                                                                  PREV:[jmp?(L3 [onExceptionToFinallyBlock])]
  2 r(1)
  2 ret(*) L1                                                                                                                           NEXT:[<END>]
L8 [finish finally]:
- 1 jmp(error)                                                                                                                          NEXT:[<ERROR>]                                                                                                                             PREV:[]
L6 [skipFinallyToErrorBlock]:
  2 mark({ return 1 })                                                                                                                  PREV:[jmp(L6 [skipFinallyToErrorBlock])]
  2 r(1)
  2 ret(*) L1
L1:
  0 <END>                                                                                                                               NEXT:[<SINK>]                                                                                                                              PREV:[ret(*) L1, ret(*) L1]
error:
  0 <ERROR>                                                                                                                             PREV:[]
sink:
  0 <SINK>                                                                                                                              PREV:[<ERROR>, <END>]
=====================
== testCopy2 ==
fun testCopy2() {
    while (cond()) {
        try {
            doSmth()
        }
        catch (e: NullPointerException) {
            doSmth1()
        }
        catch (e: Exception) {
            doSmth2()
        }
        finally {
            if (cond()) return
            else continue
        }
    }
}
---------------------
L0:
  0 <START>
  1 mark({ while (cond()) { try { doSmth() } catch (e: NullPointerException) { doSmth1() } catch (e: Exception) { doSmth2() } finally { if (cond()) return else continue } } })
  1 mark(while (cond()) { try { doSmth() } catch (e: NullPointerException) { doSmth1() } catch (e: Exception) { doSmth2() } finally { if (cond()) return else continue } })
L2 [loop entry point]:
L5 [condition entry point]:
  1 mark(cond())                                                                                                                                                                   PREV:[mark(while (cond()) { try { doSmth() } catch (e: NullPointerException) { doSmth1() } catch (e: Exception) { doSmth2() } finally { if (cond()) return else continue } }), jmp(L2 [loop entry point]), jmp(L2 [loop entry point])]
  1 call(cond, cond)
  1 jf(L3 [loop exit point])                                                                                                                                                       NEXT:[read (Unit), mark({ try { doSmth() } catch (e: NullPointerException) { doSmth1() } catch (e: Exception) { doSmth2() } finally { if (cond()) return else continue } })]
L4 [body entry point]:
  2 mark({ try { doSmth() } catch (e: NullPointerException) { doSmth1() } catch (e: Exception) { doSmth2() } finally { if (cond()) return else continue } })
  2 mark(try { doSmth() } catch (e: NullPointerException) { doSmth1() } catch (e: Exception) { doSmth2() } finally { if (cond()) return else continue })
  2 jmp?(L6 [onException])                                                                                                                                                         NEXT:[jmp?(L9 [catch 0]), jmp?(L7 [onExceptionToFinallyBlock])]
  2 jmp?(L7 [onExceptionToFinallyBlock])                                                                                                                                           NEXT:[mark({ if (cond()) return else continue }), mark({ doSmth() })]
  3 mark({ doSmth() })
  3 mark(doSmth())
  3 call(doSmth, doSmth)
  2 jmp(L8 [afterCatches])                                                                                                                                                         NEXT:[jmp(L10 [skipFinallyToErrorBlock])]
L6 [onException]:
  2 jmp?(L9 [catch 0])                                                                                                                                                             NEXT:[v(e: Exception), v(e: NullPointerException)]                                                                                                                                    PREV:[jmp?(L6 [onException])]
  3 v(e: NullPointerException)
  3 w(e)
  4 mark({ doSmth1() })
  4 mark(doSmth1())
  4 call(doSmth1, doSmth1)
  3 jmp(L8 [afterCatches])                                                                                                                                                         NEXT:[jmp(L10 [skipFinallyToErrorBlock])]
L9 [catch 0]:
  3 v(e: Exception)                                                                                                                                                                PREV:[jmp?(L9 [catch 0])]
  3 w(e)
  4 mark({ doSmth2() })
  4 mark(doSmth2())
  4 call(doSmth2, doSmth2)
  3 jmp(L8 [afterCatches])
L8 [afterCatches]:
  2 jmp(L10 [skipFinallyToErrorBlock])                                                                                                                                             NEXT:[mark({ if (cond()) return else continue })]                                                                                                                                     PREV:[jmp(L8 [afterCatches]), jmp(L8 [afterCatches]), jmp(L8 [afterCatches])]
L7 [onExceptionToFinallyBlock]:
L11 [start finally]:
  3 mark({ if (cond()) return else continue })                                                                                                                                     PREV:[jmp?(L7 [onExceptionToFinallyBlock])]
  3 mark(if (cond()) return else continue)
  3 mark(cond())
  3 call(cond, cond)
  3 jf(L12)                                                                                                                                                                        NEXT:[jmp(L2 [loop entry point]), ret L1]
  3 ret L1                                                                                                                                                                         NEXT:[<END>]
- 3 jmp(L13)                                                                                                                                                                       NEXT:[jmp(error)]                                                                                                                                                                     PREV:[]
L12:
  3 jmp(L2 [loop entry point])                                                                                                                                                     NEXT:[mark(cond())]                                                                                                                                                                   PREV:[jf(L12)]
L13:
L14 [finish finally]:
- 2 jmp(error)                                                                                                                                                                     NEXT:[<ERROR>]                                                                                                                                                                        PREV:[]
L10 [skipFinallyToErrorBlock]:
  3 mark({ if (cond()) return else continue })                                                                                                                                     PREV:[jmp(L10 [skipFinallyToErrorBlock])]
  3 mark(if (cond()) return else continue)
  3 mark(cond())
  3 call(cond, cond)
  3 jf(copy L12)                                                                                                                                                                   NEXT:[jmp(L2 [loop entry point]), ret L1]
  3 ret L1                                                                                                                                                                         NEXT:[<END>]
- 3 jmp(copy L13)                                                                                                                                                                  NEXT:[jmp(L2 [loop entry point])]                                                                                                                                                     PREV:[]
  3 jmp(L2 [loop entry point])                                                                                                                                                     NEXT:[mark(cond())]                                                                                                                                                                   PREV:[jf(copy L12)]
- 1 jmp(L2 [loop entry point])                                                                                                                                                     NEXT:[mark(cond())]                                                                                                                                                                   PREV:[]
L3 [loop exit point]:
  1 read (Unit)                                                                                                                                                                    PREV:[jf(L3 [loop exit point])]
L1:
  0 <END>                                                                                                                                                                          NEXT:[<SINK>]                                                                                                                                                                         PREV:[ret L1, ret L1, read (Unit)]
error:
  0 <ERROR>                                                                                                                                                                        PREV:[]
sink:
  0 <SINK>                                                                                                                                                                         PREV:[<ERROR>, <END>]
=====================
== testCopy3 ==
fun testCopy3() {
    try {
        doSmth()
    }
    catch (e: NullPointerException) {
        doSmth1()
    }
    catch (e: Exception) {
        doSmth2()
    }
    finally {
        while (cond());
    }
}
---------------------
L0:
  0 <START>
  1 mark({ try { doSmth() } catch (e: NullPointerException) { doSmth1() } catch (e: Exception) { doSmth2() } finally { while (cond()); } })
  1 mark(try { doSmth() } catch (e: NullPointerException) { doSmth1() } catch (e: Exception) { doSmth2() } finally { while (cond()); })
  1 jmp?(L2 [onException])                                                                                                                     NEXT:[jmp?(L5 [catch 0]), jmp?(L3 [onExceptionToFinallyBlock])]
  1 jmp?(L3 [onExceptionToFinallyBlock])                                                                                                       NEXT:[mark({ while (cond()); }), mark({ doSmth() })]
  2 mark({ doSmth() })
  2 mark(doSmth())
  2 call(doSmth, doSmth)
  1 jmp(L4 [afterCatches])                                                                                                                     NEXT:[jmp(L6 [skipFinallyToErrorBlock])]
L2 [onException]:
  1 jmp?(L5 [catch 0])                                                                                                                         NEXT:[v(e: Exception), v(e: NullPointerException)]                                                                                                PREV:[jmp?(L2 [onException])]
  2 v(e: NullPointerException)
  2 w(e)
  3 mark({ doSmth1() })
  3 mark(doSmth1())
  3 call(doSmth1, doSmth1)
  2 jmp(L4 [afterCatches])                                                                                                                     NEXT:[jmp(L6 [skipFinallyToErrorBlock])]
L5 [catch 0]:
  2 v(e: Exception)                                                                                                                            PREV:[jmp?(L5 [catch 0])]
  2 w(e)
  3 mark({ doSmth2() })
  3 mark(doSmth2())
  3 call(doSmth2, doSmth2)
  2 jmp(L4 [afterCatches])
L4 [afterCatches]:
  1 jmp(L6 [skipFinallyToErrorBlock])                                                                                                          NEXT:[mark({ while (cond()); })]                                                                                                                  PREV:[jmp(L4 [afterCatches]), jmp(L4 [afterCatches]), jmp(L4 [afterCatches])]
L3 [onExceptionToFinallyBlock]:
L7 [start finally]:
  2 mark({ while (cond()); })                                                                                                                  PREV:[jmp?(L3 [onExceptionToFinallyBlock])]
  2 mark(while (cond()))
L8 [loop entry point]:
L11 [condition entry point]:
  2 mark(cond())                                                                                                                               PREV:[mark(while (cond())), jmp(L8 [loop entry point])]
  2 call(cond, cond)
  2 jf(L9 [loop exit point])                                                                                                                   NEXT:[read (Unit), jmp(L8 [loop entry point])]
L10 [body entry point]:
  2 jmp(L8 [loop entry point])                                                                                                                 NEXT:[mark(cond())]
L9 [loop exit point]:
  2 read (Unit)                                                                                                                                PREV:[jf(L9 [loop exit point])]
L12 [finish finally]:
  1 jmp(error)                                                                                                                                 NEXT:[<ERROR>]
L6 [skipFinallyToErrorBlock]:
  2 mark({ while (cond()); })                                                                                                                  PREV:[jmp(L6 [skipFinallyToErrorBlock])]
  2 mark(while (cond()))
  2 mark(cond())                                                                                                                               PREV:[mark(while (cond())), jmp(copy L8 [loop entry point])]
  2 call(cond, cond)
  2 jf(copy L9 [loop exit point])                                                                                                              NEXT:[read (Unit), jmp(copy L8 [loop entry point])]
  2 jmp(copy L8 [loop entry point])                                                                                                            NEXT:[mark(cond())]
  2 read (Unit)                                                                                                                                PREV:[jf(copy L9 [loop exit point])]
L1:
  0 <END>                                                                                                                                      NEXT:[<SINK>]
error:
  0 <ERROR>                                                                                                                                    PREV:[jmp(error)]
sink:
  0 <SINK>                                                                                                                                     PREV:[<ERROR>, <END>]
=====================
== doTestCopy4 ==
fun doTestCopy4(list: List<String>?) : Int {
    try {
        doSmth()
    }
    finally {
        if(list != null) {
        }
    }
}
---------------------
L0:
  0 <START>
  0 v(list: List<String>?)
  0 w(list)
  1 mark({ try { doSmth() } finally { if(list != null) { } } })
  1 mark(try { doSmth() } finally { if(list != null) { } })
  1 jmp?(L2 [onExceptionToFinallyBlock])                           NEXT:[mark({ if(list != null) { } }), mark({ doSmth() })]
  2 mark({ doSmth() })
  2 mark(doSmth())
  2 call(doSmth, doSmth)
  1 jmp(L3 [skipFinallyToErrorBlock])                              NEXT:[mark({ if(list != null) { } })]
L2 [onExceptionToFinallyBlock]:
L4 [start finally]:
  2 mark({ if(list != null) { } })                                 PREV:[jmp?(L2 [onExceptionToFinallyBlock])]
  2 mark(if(list != null) { })
  2 mark(list != null)
  2 r(list)
  2 r(null)
  2 call(!=, equals)
  2 jf(L5)                                                         NEXT:[read (Unit), mark({ })]
  3 mark({ })
  3 read (Unit)
  2 jmp(L6)                                                        NEXT:[jmp(error)]
L5:
  2 read (Unit)                                                    PREV:[jf(L5)]
L6:
L7 [finish finally]:
  1 jmp(error)                                                     NEXT:[<ERROR>]                                                        PREV:[jmp(L6), read (Unit)]
L3 [skipFinallyToErrorBlock]:
  2 mark({ if(list != null) { } })                                 PREV:[jmp(L3 [skipFinallyToErrorBlock])]
  2 mark(if(list != null) { })
  2 mark(list != null)
  2 r(list)
  2 r(null)
  2 call(!=, equals)
  2 jf(copy L5)                                                    NEXT:[read (Unit), mark({ })]
  3 mark({ })
  3 read (Unit)
  2 jmp(copy L6)                                                   NEXT:[<END>]
  2 read (Unit)                                                    PREV:[jf(copy L5)]
L1:
  0 <END>                                                          NEXT:[<SINK>]                                                         PREV:[jmp(copy L6), read (Unit)]
error:
  0 <ERROR>                                                        PREV:[jmp(error)]
sink:
  0 <SINK>                                                         PREV:[<ERROR>, <END>]
=====================
