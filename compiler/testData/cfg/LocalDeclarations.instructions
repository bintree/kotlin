== C ==
class C() {
    val a: Int = 1

    class object {
        val x : Int

        {
            $x = 1
        }


        fun foo() {
            val b : Int = 1
            doSmth(b)
        }
    }
}
---------------------
L0:
  0 <START>
  0 v(val a: Int = 1)
  0 r(1)
  0 w(a)
L1:
  0 <END>                NEXT:[<SINK>]
error:
  0 <ERROR>              PREV:[]
sink:
  0 <SINK>               PREV:[<ERROR>, <END>]
=====================
== doSmth ==
fun doSmth(i: Int) {}
---------------------
L0:
  0 <START>
  0 v(i: Int)
  0 w(i)
  1 mark({})
  1 read (Unit)
L1:
  0 <END>          NEXT:[<SINK>]
error:
  0 <ERROR>        PREV:[]
sink:
  0 <SINK>         PREV:[<ERROR>, <END>]
=====================
== test1 ==
fun test1() {
    val a = object {
        val x : Int
        {
            $x = 1
        }
    }
}
---------------------
L0:
  0 <START>
  1 mark({ val a = object { val x : Int { $x = 1 } } })
  1 v(val a = object { val x : Int { $x = 1 } })
  1 mark(object { val x : Int { $x = 1 } })
  1 v(val x : Int)
  2 mark({ $x = 1 })
  2 r(1)
  2 w($x)
  1 r(object { val x : Int { $x = 1 } })
  1 w(a)
L1:
  0 <END>                                                  NEXT:[<SINK>]
error:
  0 <ERROR>                                                PREV:[]
sink:
  0 <SINK>                                                 PREV:[<ERROR>, <END>]
=====================
== O ==
object O {
    val x : Int
    {
        $x = 1
    }
}
---------------------
L0:
  0 <START>
  0 v(val x : Int)
  1 mark({ $x = 1 })
  1 r(1)
  1 w($x)
L1:
  0 <END>               NEXT:[<SINK>]
error:
  0 <ERROR>             PREV:[]
sink:
  0 <SINK>              PREV:[<ERROR>, <END>]
=====================
== test2 ==
fun test2() {
    val b = 1
    val a = object {
        val x = b
    }
}
---------------------
L0:
  0 <START>
  1 mark({ val b = 1 val a = object { val x = b } })
  1 v(val b = 1)
  1 r(1)
  1 w(b)
  1 v(val a = object { val x = b })
  1 mark(object { val x = b })
  1 v(val x = b)
  1 r(b)
  1 w(x)
  1 r(object { val x = b })
  1 w(a)
L1:
  0 <END>                                               NEXT:[<SINK>]
error:
  0 <ERROR>                                             PREV:[]
sink:
  0 <SINK>                                              PREV:[<ERROR>, <END>]
=====================
== test3 ==
fun test3() {
    val a = object {
        val y : Int
        fun inner_bar() {
            y = 10
        }
    }
}
---------------------
L0:
  0 <START>
  1 mark({ val a = object { val y : Int fun inner_bar() { y = 10 } } })
  1 v(val a = object { val y : Int fun inner_bar() { y = 10 } })
  1 mark(object { val y : Int fun inner_bar() { y = 10 } })
  1 v(val y : Int)
  1 jmp?(L2)                                                               NEXT:[r(object { val y : Int fun inner_bar() { y = 10 } }), d(fun inner_bar() { y = 10 })]
  1 d(fun inner_bar() { y = 10 })                                          NEXT:[<SINK>]
L2:
  1 r(object { val y : Int fun inner_bar() { y = 10 } })                   PREV:[jmp?(L2)]
  1 w(a)
L1:
  0 <END>                                                                  NEXT:[<SINK>]
error:
  0 <ERROR>                                                                PREV:[]
sink:
  0 <SINK>                                                                 PREV:[<ERROR>, <END>, d(fun inner_bar() { y = 10 })]
L3:
  2 <START>
  3 mark({ y = 10 })
  3 r(10)
  3 w(y)
L4:
  2 <END>               NEXT:[<SINK>]
error:
  2 <ERROR>             PREV:[]
sink:
  2 <SINK>              PREV:[<ERROR>, <END>]
=====================
== inner_bar ==
fun inner_bar() {
            y = 10
        }
---------------------
L3:
  2 <START>
  3 mark({ y = 10 })
  3 r(10)
  3 w(y)
L4:
  2 <END>               NEXT:[<SINK>]
error:
  2 <ERROR>             PREV:[]
sink:
  2 <SINK>              PREV:[<ERROR>, <END>]
=====================
== test4 ==
fun test4() {
    val a = object {
        val x : Int
        val y : Int
        {
            $x = 1
        }
        fun ggg() {
            y = 10
        }
    }
}
---------------------
L0:
  0 <START>
  1 mark({ val a = object { val x : Int val y : Int { $x = 1 } fun ggg() { y = 10 } } })
  1 v(val a = object { val x : Int val y : Int { $x = 1 } fun ggg() { y = 10 } })
  1 mark(object { val x : Int val y : Int { $x = 1 } fun ggg() { y = 10 } })
  1 v(val x : Int)
  1 v(val y : Int)
  2 mark({ $x = 1 })
  2 r(1)
  2 w($x)
  1 jmp?(L2)                                                                                NEXT:[r(object { val x : Int val y : Int { $x = 1 } fun ggg() { y = 10 } }), d(fun ggg() { y = 10 })]
  1 d(fun ggg() { y = 10 })                                                                 NEXT:[<SINK>]
L2:
  1 r(object { val x : Int val y : Int { $x = 1 } fun ggg() { y = 10 } })                   PREV:[jmp?(L2)]
  1 w(a)
L1:
  0 <END>                                                                                   NEXT:[<SINK>]
error:
  0 <ERROR>                                                                                 PREV:[]
sink:
  0 <SINK>                                                                                  PREV:[<ERROR>, <END>, d(fun ggg() { y = 10 })]
L3:
  2 <START>
  3 mark({ y = 10 })
  3 r(10)
  3 w(y)
L4:
  2 <END>               NEXT:[<SINK>]
error:
  2 <ERROR>             PREV:[]
sink:
  2 <SINK>              PREV:[<ERROR>, <END>]
=====================
== ggg ==
fun ggg() {
            y = 10
        }
---------------------
L3:
  2 <START>
  3 mark({ y = 10 })
  3 r(10)
  3 w(y)
L4:
  2 <END>               NEXT:[<SINK>]
error:
  2 <ERROR>             PREV:[]
sink:
  2 <SINK>              PREV:[<ERROR>, <END>]
=====================
== test5 ==
fun test5() {
    val a = object {
        var x = 1
        {
            $x = 2
        }
        fun foo() {
            x = 3
        }
        fun bar() {
            x = 4
        }
    }
}
---------------------
L0:
  0 <START>
  1 mark({ val a = object { var x = 1 { $x = 2 } fun foo() { x = 3 } fun bar() { x = 4 } } })
  1 v(val a = object { var x = 1 { $x = 2 } fun foo() { x = 3 } fun bar() { x = 4 } })
  1 mark(object { var x = 1 { $x = 2 } fun foo() { x = 3 } fun bar() { x = 4 } })
  1 v(var x = 1)
  1 r(1)
  1 w(x)
  2 mark({ $x = 2 })
  2 r(2)
  2 w($x)
  1 jmp?(L2)                                                                                     NEXT:[jmp?(L5), d(fun foo() { x = 3 })]
  1 d(fun foo() { x = 3 })                                                                       NEXT:[<SINK>]
L2:
  1 jmp?(L5)                                                                                     NEXT:[r(object { var x = 1 { $x = 2 } fun foo() { x = 3 } fun bar() { x = 4 } }), d(fun bar() { x = 4 })]    PREV:[jmp?(L2)]
  1 d(fun bar() { x = 4 })                                                                       NEXT:[<SINK>]
L5:
  1 r(object { var x = 1 { $x = 2 } fun foo() { x = 3 } fun bar() { x = 4 } })                   PREV:[jmp?(L5)]
  1 w(a)
L1:
  0 <END>                                                                                        NEXT:[<SINK>]
error:
  0 <ERROR>                                                                                      PREV:[]
sink:
  0 <SINK>                                                                                       PREV:[<ERROR>, <END>, d(fun foo() { x = 3 }), d(fun bar() { x = 4 })]
L3:
  2 <START>
  3 mark({ x = 3 })
  3 r(3)
  3 w(x)
L4:
  2 <END>              NEXT:[<SINK>]
error:
  2 <ERROR>            PREV:[]
sink:
  2 <SINK>             PREV:[<ERROR>, <END>]
L6:
  2 <START>
  3 mark({ x = 4 })
  3 r(4)
  3 w(x)
L7:
  2 <END>              NEXT:[<SINK>]
error:
  2 <ERROR>            PREV:[]
sink:
  2 <SINK>             PREV:[<ERROR>, <END>]
=====================
== foo ==
fun foo() {
            x = 3
        }
---------------------
L3:
  2 <START>
  3 mark({ x = 3 })
  3 r(3)
  3 w(x)
L4:
  2 <END>              NEXT:[<SINK>]
error:
  2 <ERROR>            PREV:[]
sink:
  2 <SINK>             PREV:[<ERROR>, <END>]
=====================
== bar ==
fun bar() {
            x = 4
        }
---------------------
L6:
  2 <START>
  3 mark({ x = 4 })
  3 r(4)
  3 w(x)
L7:
  2 <END>              NEXT:[<SINK>]
error:
  2 <ERROR>            PREV:[]
sink:
  2 <SINK>             PREV:[<ERROR>, <END>]
=====================
