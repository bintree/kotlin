== Ab ==
abstract class Ab {
    abstract fun getArray() : Array<Int>
}
---------------------
L0:
  0 <START>
L1:
  0 <END>      NEXT:[<SINK>]
error:
  0 <ERROR>    PREV:[]
sink:
  0 <SINK>     PREV:[<ERROR>, <END>]
=====================
== getArray ==
abstract fun getArray() : Array<Int>
---------------------
L0:
  0 <START>
L1:
  0 <END>      NEXT:[<SINK>]
error:
  0 <ERROR>    PREV:[]
sink:
  0 <SINK>     PREV:[<ERROR>, <END>]
=====================
== test ==
fun test(ab: Ab) {
    ab.getArray()[1]
}
---------------------
L0:
  0 <START>
  0 v(ab: Ab)
  0 w(ab)
  1 mark({ ab.getArray()[1] })
  1 mark(ab.getArray()[1])
  1 mark(ab.getArray())
  1 mark(getArray())
  1 r(ab)
  1 call(getArray, getArray)
  1 r(1)
  1 call(ab.getArray()[1], get)
L1:
  0 <END>                          NEXT:[<SINK>]
error:
  0 <ERROR>                        PREV:[]
sink:
  0 <SINK>                         PREV:[<ERROR>, <END>]
=====================
