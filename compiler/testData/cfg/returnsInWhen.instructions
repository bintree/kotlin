== illegalWhenBlock ==
fun illegalWhenBlock(a: Any): Any {
    when(a) {
        is Int -> return a
    }
}
---------------------
L0:
  0 <START>
  0 v(a: Any)
  0 w(a)
  1 mark({ when(a) { is Int -> return a } })
  1 mark(when(a) { is Int -> return a })
  1 r(a)
  1 mark(is Int -> return a)
  1 jmp?(L4)                                    NEXT:[<END>, r(a)]
L3:
  1 r(a)
  1 ret(*) L1                                   NEXT:[<END>]
- 1 jmp(L2)                                     PREV:[]
L1:
L2:
L4:
  0 <END>                                       NEXT:[<SINK>]                                      PREV:[jmp?(L4), ret(*) L1]
error:
  0 <ERROR>                                     PREV:[]
sink:
  0 <SINK>                                      PREV:[<ERROR>, <END>]
=====================
