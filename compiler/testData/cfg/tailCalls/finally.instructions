== test ==
tailRecursive fun test() : Int {
    try {
        // do nothing
    } finally {
        test()
    }
}
---------------------
L0:
  0 <START>
  1 mark({ try { // do nothing } finally { test() } })
  1 mark(try { // do nothing } finally { test() })
  1 jmp?(L2 [onExceptionToFinallyBlock])                  NEXT:[mark({ test() }), mark({ // do nothing })]
  2 mark({ // do nothing })
  2 read (Unit)
  1 jmp(L3 [skipFinallyToErrorBlock])                     NEXT:[mark({ test() })]
L2 [onExceptionToFinallyBlock]:
L4 [start finally]:
  2 mark({ test() })                                      PREV:[jmp?(L2 [onExceptionToFinallyBlock])]
  2 mark(test())
  2 call(test, test)
L5 [finish finally]:
  1 jmp(error)                                            NEXT:[<ERROR>]
L3 [skipFinallyToErrorBlock]:
  2 mark({ test() })                                      PREV:[jmp(L3 [skipFinallyToErrorBlock])]
  2 mark(test())
  2 call(test, test)
L1:
  0 <END>                                                 NEXT:[<SINK>]
error:
  0 <ERROR>                                               PREV:[jmp(error)]
sink:
  0 <SINK>                                                PREV:[<ERROR>, <END>]
=====================
