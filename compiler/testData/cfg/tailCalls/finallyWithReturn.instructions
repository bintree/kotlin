== test ==
tailRecursive fun test() : Int {
    try {
        // do nothing
    } finally {
        return test()
    }
}
---------------------
L0:
  0 <START>
  1 mark({ try { // do nothing } finally { return test() } })
  1 mark(try { // do nothing } finally { return test() })
  1 jmp?(L2 [onExceptionToFinallyBlock])                         NEXT:[mark({ return test() }), mark({ // do nothing })]
  2 mark({ // do nothing })
  2 read (Unit)
  1 jmp(L3 [skipFinallyToErrorBlock])                            NEXT:[mark({ return test() })]
L2 [onExceptionToFinallyBlock]:
L4 [start finally]:
  2 mark({ return test() })                                      PREV:[jmp?(L2 [onExceptionToFinallyBlock])]
  2 mark(test())
  2 call(test, test)
  2 ret(*) L1                                                    NEXT:[<END>]
L5 [finish finally]:
- 1 jmp(error)                                                   NEXT:[<ERROR>]                                                      PREV:[]
L3 [skipFinallyToErrorBlock]:
  2 mark({ return test() })                                      PREV:[jmp(L3 [skipFinallyToErrorBlock])]
  2 mark(test())
  2 call(test, test)
  2 ret(*) L1
L1:
  0 <END>                                                        NEXT:[<SINK>]                                                       PREV:[ret(*) L1, ret(*) L1]
error:
  0 <ERROR>                                                      PREV:[]
sink:
  0 <SINK>                                                       PREV:[<ERROR>, <END>]
=====================
