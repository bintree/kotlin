== test ==
fun test() : Unit {
    try {
        test()
    } catch (any : Exception) {
        test()
    } finally {
        test()
    }
}
---------------------
L0:
  0 <START>
  1 mark({ try { test() } catch (any : Exception) { test() } finally { test() } })
  1 mark(try { test() } catch (any : Exception) { test() } finally { test() })
  1 jmp?(L2 [onException])                                                            NEXT:[v(any : Exception), jmp?(L3 [onExceptionToFinallyBlock])]
  1 jmp?(L3 [onExceptionToFinallyBlock])                                              NEXT:[mark({ test() }), mark({ test() })]
  2 mark({ test() })
  2 mark(test())
  2 call(test, test)
  1 jmp(L4 [afterCatches])                                                            NEXT:[jmp(L5 [skipFinallyToErrorBlock])]
L2 [onException]:
  2 v(any : Exception)                                                                PREV:[jmp?(L2 [onException])]
  2 w(any)
  3 mark({ test() })
  3 mark(test())
  3 call(test, test)
  2 jmp(L4 [afterCatches])
L4 [afterCatches]:
  1 jmp(L5 [skipFinallyToErrorBlock])                                                 NEXT:[mark({ test() })]                                                                  PREV:[jmp(L4 [afterCatches]), jmp(L4 [afterCatches])]
L3 [onExceptionToFinallyBlock]:
L6 [start finally]:
  2 mark({ test() })                                                                  PREV:[jmp?(L3 [onExceptionToFinallyBlock])]
  2 mark(test())
  2 call(test, test)
L7 [finish finally]:
  1 jmp(error)                                                                        NEXT:[<ERROR>]
L5 [skipFinallyToErrorBlock]:
  2 mark({ test() })                                                                  PREV:[jmp(L5 [skipFinallyToErrorBlock])]
  2 mark(test())
  2 call(test, test)
L1:
  0 <END>                                                                             NEXT:[<SINK>]
error:
  0 <ERROR>                                                                           PREV:[jmp(error)]
sink:
  0 <SINK>                                                                            PREV:[<ERROR>, <END>]
=====================
