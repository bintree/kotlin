== sum ==
tailRecursive fun sum(x: Long, sum: Long): Long {
    if (x == 0.toLong()) return sum
    return sum(x - 1, sum + x)
}
---------------------
L0:
  0 <START>
  0 v(x: Long)
  0 w(x)
  0 v(sum: Long)
  0 w(sum)
  1 mark({ if (x == 0.toLong()) return sum return sum(x - 1, sum + x) })
  1 mark(if (x == 0.toLong()) return sum)
  1 mark(x == 0.toLong())
  1 r(x)
  1 mark(0.toLong())
  1 mark(toLong())
  1 r(0)
  1 call(toLong, toLong)
  1 call(==, equals)
  1 jf(L2)                                                                  NEXT:[read (Unit), r(sum)]
  1 r(sum)
  1 ret(*) L1                                                               NEXT:[<END>]
- 1 jmp(L3)                                                                 NEXT:[mark(sum(x - 1, sum + x))]                                               PREV:[]
L2:
  1 read (Unit)                                                             PREV:[jf(L2)]
L3:
  1 mark(sum(x - 1, sum + x))
  1 mark(x - 1)
  1 r(x)
  1 r(1)
  1 call(-, minus)
  1 mark(sum + x)
  1 r(sum)
  1 r(x)
  1 call(+, plus)
  1 call(sum, sum)
  1 ret(*) L1
L1:
  0 <END>                                                                   NEXT:[<SINK>]                                                                  PREV:[ret(*) L1, ret(*) L1]
error:
  0 <ERROR>                                                                 PREV:[]
sink:
  0 <SINK>                                                                  PREV:[<ERROR>, <END>]
=====================
