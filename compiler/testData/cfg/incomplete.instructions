== foo ==
fun foo(c: Collection<Int>) {
    for (e in c) {
        {
            break
        }
    }
---------------------
L0:
  0 <START>
  0 v(c: Collection<Int>)
  0 w(c)
  1 mark({ for (e in c) { { break } })
  2 mark(for (e in c) { { break } })
  2 r(c)
  2 v(e)
L3:
  2 jmp?(L2)                              NEXT:[read (Unit), w(e)]
L4 [loop entry point]:
L5 [body entry point]:
  2 w(e)                                  PREV:[jmp?(L2), jmp?(L4 [loop entry point])]
  3 mark({ { break } })
  3 mark({ break })
  3 jmp?(L6)                              NEXT:[r({ break }), d({ break })]
  3 d({ break })                          NEXT:[<SINK>]
L6:
  3 r({ break })                          PREV:[jmp?(L6)]
  2 jmp?(L4 [loop entry point])           NEXT:[w(e), read (Unit)]
L2:
  2 read (Unit)                           PREV:[jmp?(L2), jmp(L2), jmp?(L4 [loop entry point])]
L1:
  0 <END>                                 NEXT:[<SINK>]
error:
  0 <ERROR>                               PREV:[]
sink:
  0 <SINK>                                PREV:[<ERROR>, <END>, d({ break })]
L7:
  4 <START>
  5 mark(break)
  5 jmp(L2)        NEXT:[read (Unit)]
L8:
  4 <END>          NEXT:[<SINK>]         PREV:[]
error:
  4 <ERROR>        PREV:[]
sink:
  4 <SINK>         PREV:[<ERROR>, <END>]
=====================
== anonymous_0 ==
{
            break
        }
---------------------
L7:
  4 <START>
  5 mark(break)
  5 jmp(L2)        NEXT:[read (Unit)]
L8:
  4 <END>          NEXT:[<SINK>]         PREV:[]
error:
  4 <ERROR>        PREV:[]
sink:
  4 <SINK>         PREV:[<ERROR>, <END>]
=====================
