== A ==
trait A {
    fun foo() : Int
}
---------------------
L0:
  0 <START>
L1:
  0 <END>      NEXT:[<SINK>]
error:
  0 <ERROR>    PREV:[]
sink:
  0 <SINK>     PREV:[<ERROR>, <END>]
=====================
== foo ==
fun foo() : Int
---------------------
L0:
  0 <START>
L1:
  0 <END>      NEXT:[<SINK>]
error:
  0 <ERROR>    PREV:[]
sink:
  0 <SINK>     PREV:[<ERROR>, <END>]
=====================
== B ==
class B : A {
    override fun foo() = 10
}
---------------------
L0:
  0 <START>
  0 unsupported(DELEGATOR_SUPER_CLASS : A)
L1:
  0 <END>                                     NEXT:[<SINK>]
error:
  0 <ERROR>                                   PREV:[]
sink:
  0 <SINK>                                    PREV:[<ERROR>, <END>]
=====================
== foo ==
override fun foo() = 10
---------------------
L0:
  0 <START>
  0 r(10)
L1:
  0 <END>      NEXT:[<SINK>]
error:
  0 <ERROR>    PREV:[]
sink:
  0 <SINK>     PREV:[<ERROR>, <END>]
=====================
== foo ==
fun foo(b: B) : Int {
    val o = object : A by b {}
    return o.foo()
}
---------------------
L0:
  0 <START>
  0 v(b: B)
  0 w(b)
  1 mark({ val o = object : A by b {} return o.foo() })
  1 v(val o = object : A by b {})
  1 mark(object : A by b {})
  1 r(b)
  1 r(object : A by b {})
  1 w(o)
  1 mark(o.foo())
  1 mark(foo())
  1 r(o)
  1 call(foo, foo)
  1 ret(*) L1
L1:
  0 <END>                                                  NEXT:[<SINK>]
error:
  0 <ERROR>                                                PREV:[]
sink:
  0 <SINK>                                                 PREV:[<ERROR>, <END>]
=====================
