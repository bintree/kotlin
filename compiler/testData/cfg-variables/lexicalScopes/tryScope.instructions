== foo ==
fun foo() {
    "before"
    try {
        foo()
    }
    catch (e: Exception) {
        val a = e
    }
    finally {
        val a = 1
    }
    "after"
}
---------------------
 0 <START>                                                                                              INIT: in: {}    out: {}    USE: in: {e=LAST_READ}    out: {e=LAST_READ}
 1 mark({ "before" try { foo() } catch (e: Exception) { val a = e } finally { val a = 1 } "after" })    INIT: in: {}    out: {}    USE: in: {e=LAST_READ}    out: {e=LAST_READ}
 1 mark("before")                                                                                       INIT: in: {}    out: {}    USE: in: {e=LAST_READ}    out: {e=LAST_READ}
 1 r("before")                                                                                          INIT: in: {}    out: {}    USE: in: {e=LAST_READ}    out: {e=LAST_READ}
 1 mark(try { foo() } catch (e: Exception) { val a = e } finally { val a = 1 })                         INIT: in: {}    out: {}    USE: in: {e=LAST_READ}    out: {e=LAST_READ}
 1 jmp?(L2 [onException])                                                                               INIT: in: {}    out: {}    USE: in: {e=LAST_READ}    out: {e=LAST_READ}
 1 jmp?(L3 [onExceptionToFinallyBlock])                                                                 INIT: in: {}    out: {}    USE: in: {}    out: {}
 2 mark({ foo() })                                                                                      INIT: in: {}    out: {}    USE: in: {}    out: {}
 2 mark(foo())                                                                                          INIT: in: {}    out: {}    USE: in: {}    out: {}
 2 call(foo, foo)                                                                                       INIT: in: {}    out: {}    USE: in: {}    out: {}
 1 jmp(L4 [afterCatches])                                                                               INIT: in: {}    out: {}    USE: in: {}    out: {}
 2 v(e: Exception)                                                                                      INIT: in: {}    out: {e=I- D+}    USE: in: {e=LAST_READ}    out: {e=LAST_READ}
 2 w(e)                                                                                                 INIT: in: {e=I- D+}    out: {e=I+ D+}    USE: in: {e=LAST_READ}    out: {e=LAST_READ}
 3 mark({ val a = e })                                                                                  INIT: in: {e=I+ D+}    out: {e=I+ D+}    USE: in: {e=LAST_READ}    out: {e=LAST_READ}
 3 v(val a = e)                                                                                         INIT: in: {e=I+ D+}    out: {a=I- D+, e=I+ D+}    USE: in: {e=LAST_READ}    out: {e=LAST_READ}
 3 r(e)                                                                                                 INIT: in: {a=I- D+, e=I+ D+}    out: {a=I- D+, e=I+ D+}    USE: in: {}    out: {e=LAST_READ}
 3 w(a)                                                                                                 INIT: in: {a=I- D+, e=I+ D+}    out: {a=I+ D+, e=I+ D+}    USE: in: {}    out: {}
 2 jmp(L4 [afterCatches])                                                                               INIT: in: {a=I+ D+, e=I+ D+}    out: {a=I+ D+, e=I+ D+}    USE: in: {}    out: {}
 1 jmp(L5 [skipFinallyToErrorBlock])                                                                    INIT: in: {a=I+ D+, e=I+ D+}    out: {a=I+ D+, e=I+ D+}    USE: in: {}    out: {}
 2 mark({ val a = 1 })                                                                                  INIT: in: {}    out: {}    USE: in: {}    out: {}
 2 v(val a = 1)                                                                                         INIT: in: {}    out: {a=I- D+}    USE: in: {}    out: {}
 2 r(1)                                                                                                 INIT: in: {a=I- D+}    out: {a=I- D+}    USE: in: {}    out: {}
 2 w(a)                                                                                                 INIT: in: {a=I- D+}    out: {a=I+ D+}    USE: in: {}    out: {}
 1 jmp(error)                                                                                           INIT: in: {a=I+ D+}    out: {a=I+ D+}    USE: in: {}    out: {}
 2 mark({ val a = 1 })                                                                                  INIT: in: {a=I+ D+, e=I+ D+}    out: {a=I+ D+, e=I+ D+}    USE: in: {}    out: {}
 2 v(val a = 1)                                                                                         INIT: in: {a=I+ D+, e=I+ D+}    out: {a=I+ D+, a=I- D+, e=I+ D+}    USE: in: {}    out: {}
 2 r(1)                                                                                                 INIT: in: {a=I+ D+, a=I- D+, e=I+ D+}    out: {a=I+ D+, a=I- D+, e=I+ D+}    USE: in: {}    out: {}
 2 w(a)                                                                                                 INIT: in: {a=I+ D+, a=I- D+, e=I+ D+}    out: {a=I+ D+, a=I+ D+, e=I+ D+}    USE: in: {}    out: {}
 1 mark("after")                                                                                        INIT: in: {a=I+ D+, a=I+ D+, e=I+ D+}    out: {a=I+ D+, a=I+ D+, e=I+ D+}    USE: in: {}    out: {}
 1 r("after")                                                                                           INIT: in: {a=I+ D+, a=I+ D+, e=I+ D+}    out: {a=I+ D+, a=I+ D+, e=I+ D+}    USE: in: {}    out: {}
 0 <END>                                                                                                INIT: in: {a=I+ D+, a=I+ D+, e=I+ D+}    out: {a=I+ D+, a=I+ D+, e=I+ D+}    USE: in: {}    out: {}
 0 <ERROR>                                                                                              INIT: in: {a=I+ D+}    out: {a=I+ D+}    USE: in: {}    out: {}
 0 <SINK>                                                                                               INIT: in: {a=I+ D+, a=I+ D+, e=I+ D+}    out: {a=I+ D+, a=I+ D+, e=I+ D+}    USE: in: {}    out: {}
=====================
