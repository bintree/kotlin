package

public fun builder(/*0*/ coroutine c: Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>): kotlin.Unit
public fun test(): kotlin.Unit
public suspend fun </*0*/ V> V.await(/*0*/ f: () -> V, /*1*/ machine: kotlin.coroutines.Continuation<V>, /*2*/ controller: Controller): kotlin.Unit
public suspend fun </*0*/ V> kotlin.Int.await(/*0*/ machine: kotlin.coroutines.Continuation<V>, /*1*/ controller: Controller): kotlin.Unit
public suspend fun </*0*/ V> V.inferFromReceiver(/*0*/ machine: kotlin.coroutines.Continuation<V>, /*1*/ controller: Controller): kotlin.Unit
public suspend fun kotlin.String.severalParams(/*0*/ x: kotlin.String, /*1*/ y: kotlin.Int, /*2*/ machine: kotlin.coroutines.Continuation<kotlin.Double>, /*3*/ controller: Controller): kotlin.Unit
public suspend fun kotlin.String.yieldString(/*0*/ c: kotlin.coroutines.Continuation<kotlin.Unit>, /*1*/ controller: Controller): kotlin.Unit

@kotlin.coroutines.AllowSuspendExtensions public final class Controller {
    public constructor Controller()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
